# Doxygen Guidelines

This README provide a quick start to documenting the code and using Doxygen in general. Doxygen is a framework that allows you to automatically generate documentation from comments and markup tags inserted directly into the source.

## Getting Started
### Installation
```
sudo apt-get install doxygen
```
### Generating documentation
```
make doc
```
Doxygen relies on a configuration file (doxygen.conf) to generate the documentation. You can modify this configuration as you see fit. When generating documentation, the file 'doxygen.warn' will be generated. This file will contain all errors generated by doxygen. Make sure to have ZERO doxygen errors, specifically any errors related to UNDOCUMENTED variable and functions, after running the above command. 

If the above command runs successfully, then you should have a /doc directory with an index.html file. View it locally in a browser to see the documentation created from the code you wrote.

## Documentation
Code documentation with Doxygen happens in the commends of the code. Special tags are used to indicate the information. This secion gives some examples to get you started using doxygen.

Document file headers and function prototypes in the header file.
Document file headers in the c files.

### Documenting the File Header

File header contains information on the purpose/goal of the file and other information such as author. Below shows the file header of a file named console.h
```
/** @file console.h
 *  @brief Function prototypes for the console driver.
 *
 *  This contains the prototypes for the console
 *  driver and eventually any macros, constants,
 *  or global variables you will need.
 *
 *  @date Jan 11 2011
 *  @author John Doe (jdoe@andrew.cmu.edu) 
 */
```

### Documenting the Function Prototypes

When documenting a function prototype, it is recommended to write in detail the purpose and expected input/output of the function. For example, if the function to document is:
```
void set_cursor(int row, int col);
```
the documented version should look like:
```
/** @brief Sets the position of the cursor to the
 *         position (row, col).
 *
 *  Subsequent calls to putbytes should cause the console
 *  output to begin at the new position. If the cursor is
 *  currently hidden, a call to set_cursor() must not show
 *  the cursor.
 *
 *  @param row The new row for the cursor.
 *  @param col The new column for the cursor.
 *  @return Void.
 */
void set_cursor(int row, int col);
```

### Documenting a variable

Following is an example for documenting an integer
```
int sum;
```
should be documented as:
```
/** @brief the sum of two values*/
int sum;
```

Following is an example for documenting a definition
```
#define GPIO_FUN_INPUT 0
```
should be documented as:
```
/** @brief GPIO Function select INPUT */
#define GPIO_FUN_INPUT 0
```

## More details
More details can be found in the following link:
```
https://www.cs.cmu.edu/~410/doc/doxygen.html
```
